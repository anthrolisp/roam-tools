#!/usr/bin/env ruby

require 'json'
require 'date'
require 'pry_debug'
require 'optparse'

# Does the page have a "Roam day-like" title?
def is_day_page?(page)
  page["title"] =~ /^(#{Date::MONTHNAMES[1..-1].join('|')}).*, \d{4}/
end

# pattern - the pattern to match (String or Regexp)
# string - the string to check for match
def string_matches_pattern(pattern, string)
  case pattern
  when Regexp
     pattern === node['string']
  when String
    string.include?(pattern)
  end
end

def traverse_nodes_breadth_first(nodes, &block)
  nodes.each do |node|
    block.call(node)
  end

  nodes.each do |node|
    traverse_nodes_breadth_first(node['children'] || [], &block)
  end

  nil
end

def traverse_nodes_depth_first(nodes, &block)
  nodes.each do |node|
    block.call(node)
    traverse_nodes_depth_first(node['children'] || [], &block)
  end

  nil
end

# Recursively find the first block reference for a node
# that matches the pattern.
# pattern - can === a string
# nodes - a list of things that have a 'uid', and maybe a 'children'
def nested_block_reference_matching_pattern(pattern:, nodes:)
  value = []
  traverse_nodes_depth_first(nodes) {|node|
    if string_matches_pattern(pattern, node['string'])
      value << node["uid"]
    end
  }

  value
end

# Return [uid]
def get_matching_for_page(pattern:, page:)
  nested_block_reference_matching_pattern(pattern: pattern, nodes: page['children'] || [])
end

# Given the pages and a pattern, return the list of uids that match the
# pattern for each page.
#
# Return [[title, [uid]]
def get_matching_for_pages(pattern:, pages:)
  pages.map {|page|
    uids = get_matching_for_page(pattern: pattern, page: page)
    uids.any? ?
      [ page['title'], uids ] :
      nil
  }.compact
end

def month_for_date(date_string)
  date = Date.parse(date_string)
  "#{Date::MONTHNAMES[date.month]}, #{date.year}"
end

# [page] => {"month page": [page]}
def group_by_month(day_pages)
  day_pages.inject({}) {|h, page|
    month_string = month_for_date(page['title'])
    h[month_string] ||= []
    h[month_string] << page
    h
  }
end

# Given an Enumerable of pages, find the ones that are day pages.
def get_day_pages(pages)
  pages.select(&method(:is_day_page?))
end

# Parse the IO as a single JSON doc.
def parse(stream)
  pages = JSON.load(stream)
end

# Given the arguments, return the stream to parse.
# options - Configuration based on command line arguments
def get_stream(options)
  options[:file].nil? ?
    $stdin :
    open(File.expand_path(options[:file]))
end

def first_only(titles_and_uids)
  titles_and_uids.map do |title, uids|
    [title, uids[0,1]]
  end
end

# Return a hash of { month_name: [page] }
def process(pattern:, pages:, include_all: false)
  day_pages = get_day_pages(pages)
  by_month = group_by_month(day_pages)
  by_month.map {|month, pages|
    matching = get_matching_for_pages(pattern: pattern, pages: pages)
    next nil if matching.empty?

    matching = first_only(matching) unless include_all

    matching = matching.sort_by {|d, e| Date.parse(d)}
    [month, matching]
  }.compact.sort_by {|month, _|
    Date.parse(month)
  }.to_h
end

# Format the list of pages for Roam, nested under the pattern.
#
# title - The pattern to render as the top-level node
# pages - The list of day, uid to format
# E.g.
# [[Journal]]
#   [[August 1st, 2020]]
#     {{embed: ((abcdefghi))}}
#   [[August 6th, 2020]]
#     {{embed: ((bcdefghij))}}
def format(title, uids_by_day)
  return nil if uids_by_day.nil?
  formatted_pages = uids_by_day.map {|day, uids|
    formatted_uids = uids.map {|uid| "    {{embed: ((#{uid}))}}"}.join("\n")
    formatted_day = "  [[#{day}]]"
    "#{formatted_day}\n#{formatted_uids}"
  }.join("\n")
  <<-OUTPUT
#{title}
#{formatted_pages}
  OUTPUT
end

# Optionally return only the results matching the specified month.
#
# match_month - The month to match. If nil, don't filter anything.
# results_by_month - [month, [uid]]
#
# Return results in the same shape as the input, potentially filtered.
def filter_months(match_month, results_by_month)
  return results_by_month if match_month.nil?

  results_by_month.select {|month, _|
    month == match_month
  }
end

# Is the configuration built from the command line args valid?
def config_valid?(config)
  !config[:pattern].nil?
end

# Return a configuration based on the command line arguments.
def parse_arguments!(argv)
  results = {}

  option_parser = OptionParser.new do |opts|
    opts.on("-h", "--help", "Prints this help") do
      results[:help] = opts.help
    end

    opts.on("-sS", "--match-string=S", "Match nodes containing the string") do |s|
      results[:pattern] = s
    end

    opts.on("-mD", "--month=D", "Only return results for the month containing the given date") do |d|
      results[:month] = month_for_date(d)
    end

    opts.on("-fF", "--file=F", "Use the given file as input. If absent, will parse STDIN") do |f|
      results[:file] = f
    end

    opts.on("-a", "--include-all", "Include all the matching results, not just the first") do |a|
      results[:include_all] = true
    end
  end

  option_parser.parse!(argv)
  if argv.count != 0 || !config_valid?(results)
    results = { :help => option_parser.help }
  end

  results
end

if __FILE__ == $0
  options = parse_arguments!(ARGV)

  if options[:help]
    puts options[:help]
    exit(1)
  end

  stream = get_stream(options)
  pages = parse(stream)
  results_by_month = process(pattern: options[:pattern], include_all: options[:include_all], pages: pages)
  relevant_results = filter_months(options[:month], results_by_month)
  formatted = relevant_results.map {|month, results|
    format(options[:pattern], results)
  }.join("\n\n")
  puts formatted
end
